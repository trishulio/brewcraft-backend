# DataSource Config
app.config.ds.db-name=${DB_NAME}
# PostgreSQL
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
# This property actually disabled the auto-commit
spring.datasource.hikari.auto-commit=false
# Leaving this property here in case spring chooses to use a different implementation than Hikari
spring.datasource.auto-commit=false

# Admin DataSource Config
app.config.tenant.admin.ds.schema.prefix=brewcraft_admin_
app.config.tenant.admin.ds.schema.migration=db/admin_migrations
## Default DataSource Hikari Config
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

# Tenant DataSource Config
app.config.tenant.ds.schema.prefix=brewcraft_
app.config.tenant.ds.schema.migration=db/tenant_migrations
app.config.tenant.ds.pool.size=5
app.config.tenant.ds.db.auto-commit=false

# Admin Tenant Config
app.config.tenant.admin.id=00000000-0000-0000-0000-000000000000
app.config.tenant.admin.name=brewcraft_admin

# Mapstruct
mapstruct.unmappedTargetPolicy=ERROR
mapstruct.verbose=true

# JPA
spring.jpa.database=POSTGRESQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true

# Flyway
## Spring 1.X
flyway.enabled=false
## Spring 2.X
spring.flyway.enabled=false

# AWS Secrets Manager
aws.secretsmanager.access-key=${AWS_SECRETS_MANAGER_ACCESS_KEY_ID}
aws.secretsmanager.access-secret-key=${AWS_SECRETS_MANAGER_ACCESS_SECRET_KEY}
aws.secretsmanager.region=${AWS_SECRETS_MANAGER_REGION}
aws.secretsmanager.url=${AWS_SECRETS_MANAGER_URL}

# AWS Cognito Authorization Server
spring.security.oauth2.resourceserver.jwt.issuer-uri=${JWT_ISSUER_URI}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${JWK_SET_URI}

# AWS Cognito User Service
aws.cognito.region=${AWS_COGNITO_REGION}
aws.cognito.url=${AWS_COGNITO_URL}
aws.cognito.user-pool.id=${AWS_COGNITO_USER_POOL_ID}
aws.cognito.user-pool.url=${AWS_COGNITO_USER_POOL_URL}
# Set access key and secret key if different aws user is used for cognito service
# Otherwise it will pick either values set for aws.access-key and aws.access-secret or
# credentials of aws iam role assigned for EC2
aws.cognito.access-key=${AWS_COGNITO_ACCESS_KEY_ID}
aws.cognito.access-secret=${AWS_COGNITO_SECRET_KEY}

# AWS Cognito Identity Pool
aws.cognito.identity.pool.id=${AWS_COGNITO_IDENTITY_POOL_ID}

# AWS S3
aws.s3.region=${AWS_S3_REGION}
aws.s3.access-key=${AWS_S3_ACCESS_KEY_ID}
aws.s3.access-secret=${AWS_S3_ACCESS_SECRET_KEY}

# AWS IAM
aws.iam.access-key=${AWS_IAM_ACCESS_KEY_ID}
aws.iam.access-secret=${AWS_IAM_ACCESS_SECRET_KEY}

# AWS Deployment
aws.deployment.accountId=${AWS_DEPLOYMENT_ACCOUNT_ID}
aws.deployment.parition=${AWS_DEPLOYMENT_PARTITION}

# App IaaS
# Because ID Tokens expire in 1 hour
app.iaas.credentials.expiry.duration=3600

# App ObjectStore
app.object-store.file.get.url.expiry=24
app.object-store.bucket.name=root-bucket

# App ObjectStoreCorsConfig
aws.s3.config.cors.allowed.headers=*
aws.s3.config.cors.allowed.methods=GET;PUT;POST;DELETE
aws.s3.config.cors.allowed.origins=${APP_HOST_URLS}

# App PublicAccessBlock
aws.s3.config.access.public.acls.block=true
aws.s3.config.access.public.acls.ignore=true
aws.s3.config.access.public.policy.block=true
aws.s3.config.access.public.buckets.restrict=true

# API Doc Generation
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.packagesToScan=io.company.brewcraft.controller
springdoc.swagger-ui.operationsSorter=alpha

logging.level.io.company.brewcraft=DEBUG